# Docker Compose for Production Deployment
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

version: '3.8'

services:
  app:
    # Production build target
    build:
      target: production
      args:
        - VERSION=${VERSION:-latest}
        - BUILD_DATE=${BUILD_DATE}
        - VCS_REF=${VCS_REF}
    # Production command with gunicorn
    command: >
      gunicorn app.main:app
      --worker-class uvicorn.workers.UvicornWorker
      --workers 4
      --worker-connections 1000
      --bind 0.0.0.0:8000
      --keep-alive 2
      --max-requests 1000
      --max-requests-jitter 100
      --timeout 30
      --access-logfile -
      --error-logfile -
      --log-level info
      --capture-output
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - PYTHONOPTIMIZE=2
    # No volume mounts in production for security
    volumes: []
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # Health check with faster intervals
    healthcheck:
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s

  redis:
    # Production Redis configuration
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 0
    # Don't expose Redis port in production
    ports: []
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

  postgres:
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    # Don't expose PostgreSQL port in production
    ports: []
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Enable Nginx proxy for production
  nginx:
    profiles: []  # Remove from profiles to enable by default
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

# Production-specific volumes with drivers optimized for performance
volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/pl8wrds/redis
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/pl8wrds/postgres
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/pl8wrds/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/pl8wrds/grafana