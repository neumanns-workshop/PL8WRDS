[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pl8wrds"
version = "1.0.0"
description = "License plate word game API with AI scoring"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "PL8WRDS Team", email = "team@pl8wrds.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Games/Entertainment :: Puzzle Games",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed"
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.115.2",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.5.0",
    "httpx>=0.27.0",
    "aiofiles>=24.0.0",
    "starlette>=0.47.2",
    "python-multipart>=0.0.18",
    "anyio>=4.4.0",
    "h11>=0.16.0",
    "scikit-learn>=1.5.1",
    "pandas>=2.2.2",
    "numpy>=1.26.0,<2.2.0",
    "joblib>=1.4.2",
    "dependency-injector>=4.41.0",
    "openai>=1.0.0",
    "tqdm>=4.65.0",
    "prometheus-client>=0.20.0",
    "prometheus-fastapi-instrumentator>=7.0.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-auto-instrumentation>=0.41b0",
    "opentelemetry-exporter-jaeger>=1.20.0",
    "opentelemetry-exporter-prometheus>=1.20.0",
    "opentelemetry-instrumentation-fastapi>=0.41b0",
    "opentelemetry-instrumentation-httpx>=0.41b0",
    "opentelemetry-instrumentation-logging>=0.41b0",
    "structlog>=23.2.0",
    "sentry-sdk[fastapi]>=1.38.0",
    "redis>=5.0.0",
    "asyncio-mqtt>=0.16.0",
    "aiosmtplib>=3.0.1",
]

[project.optional-dependencies]
dev = [
    # Code quality & formatting
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "types-requests>=2.31.0",
    "types-redis>=4.6.0",
    "types-setuptools>=68.0.0",
    
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.1.0",
    "pytest-html>=3.2.0",
    "pytest-json-report>=1.5.0",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
    "freezegun>=1.2.0",
    "httpx>=0.24.0",
    "requests-mock>=1.11.0",
    
    # Security scanning
    "bandit>=1.7.0",
    "safety>=2.3.0",
    
    # Debugging & profiling
    "ipython>=8.14.0",
    "ipdb>=0.13.0",
    
    # Performance testing
    "locust>=2.16.0",
    
    # Development utilities
    "python-dotenv>=1.0.0",
    "pre-commit>=3.0.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
    "freezegun>=1.2.0",
    "httpx>=0.24.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocs-swagger-ui-tag>=0.6.0",
]

[project.urls]
Homepage = "https://github.com/username/PL8WRDS"
Documentation = "https://pl8wrds.readthedocs.io/"
Repository = "https://github.com/username/PL8WRDS.git"
Issues = "https://github.com/username/PL8WRDS/issues"

[project.scripts]
pl8wrds-server = "app.main:main"

# ================================
# TOOL CONFIGURATIONS
# ================================

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["app", "tests"]

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "S",  # flake8-bandit
    "N",  # pep8-naming
    "D",  # pydocstyle
    "UP", # pyupgrade
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # numpy
    "PERF", # perflint
    "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # ruff-specific rules
]
ignore = [
    "D203",    # 1 blank line required before class docstring
    "D213",    # Multi-line docstring summary should start at the second line
    "ANN101",  # Missing type annotation for self in method
    "ANN102",  # Missing type annotation for cls in classmethod
    "COM812",  # Missing trailing comma
    "ISC001",  # Implicitly concatenated string literals on one line
    "S101",    # Use of assert detected (allow for tests)
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "D", "ANN", "PLR2004"]
"conftest.py" = ["D"]
"scripts/*" = ["D", "T201"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "joblib.*",
    "pandas.*",
    "numpy.*",
    "prometheus_client.*",
    "structlog.*",
    "dependency_injector.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "unit: marks tests as unit tests (fast, isolated)",
    "integration: marks tests as integration tests (with external dependencies)",
    "api: marks tests as API/endpoint tests",
    "e2e: marks tests as end-to-end tests",
    "performance: marks tests as performance/benchmark tests",
    "slow: marks tests as slow running",
    "requires_ollama: marks tests that require Ollama service",
    "requires_cache: marks tests that require cache files",
]
norecursedirs = [".git", ".tox", "dist", "build", "*.egg", "cache", "data", "models"]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

[tool.coverage.run]
source = ["app"]
omit = [
    "tests/*",
    "*/conftest.py",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstract",
]
show_missing = true
precision = 2

[tool.bandit]
exclude_dirs = ["tests", "venv", "env", ".venv"]
skips = ["B101", "B601"]
severity = "medium"
confidence = "medium"
