name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff black mypy types-requests

      - name: Run ruff linting
        run: ruff check . --output-format=github

      - name: Run ruff formatting check
        run: ruff format --check .

      - name: Run black formatting check
        run: black --check .

      - name: Run mypy type checking
        run: mypy app --ignore-missing-imports

      - name: Check import sorting
        run: ruff check . --select I --output-format=github

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety semgrep

      - name: Run Bandit security linter
        run: bandit -r app -f json -o bandit-report.json || true

      - name: Run Safety dependency check
        run: safety check --json --output safety-report.json || true

      - name: Run Semgrep security scan
        run: |
          python -m semgrep --config=auto --json --output=semgrep-report.json app || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create cache directories
        run: |
          mkdir -p cache
          mkdir -p data
          mkdir -p models

      - name: Run unit tests
        run: |
          pytest tests/unit -v --cov=app --cov-report=xml --cov-report=term-missing
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Run integration tests
        run: |
          pytest tests/integration -v --cov=app --cov-append --cov-report=xml
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  # API Tests
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create necessary directories and files
        run: |
          mkdir -p cache data models
          touch data/words_with_freqs.json
          echo '{}' > cache/corpus_stats.json
          echo '{}' > cache/corpus_features.json

      - name: Start FastAPI application
        run: |
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          PYTHONPATH: ${{ github.workspace }}
          ENVIRONMENT: test

      - name: Wait for API to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 1; done'

      - name: Run API tests
        run: |
          pytest tests/api -v --cov=app --cov-append --cov-report=xml
        env:
          PYTHONPATH: ${{ github.workspace }}
          API_BASE_URL: http://localhost:8000

      - name: Run E2E tests
        run: |
          pytest tests/e2e -v --cov=app --cov-append --cov-report=xml
        env:
          PYTHONPATH: ${{ github.workspace }}
          API_BASE_URL: http://localhost:8000

  # Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, security, test]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [api-tests]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust

      - name: Create test data
        run: |
          mkdir -p cache data models
          echo '{}' > cache/corpus_stats.json
          echo '{}' > cache/corpus_features.json
          touch data/words_with_freqs.json

      - name: Start FastAPI application
        run: |
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          PYTHONPATH: ${{ github.workspace }}
          ENVIRONMENT: test

      - name: Run performance tests
        run: |
          pytest tests/performance -v --benchmark-only --benchmark-json=performance-results.json
        env:
          PYTHONPATH: ${{ github.workspace }}
          API_BASE_URL: http://localhost:8000

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results.json

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, api-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.pl8wrds.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          echo "Digest: ${{ needs.build.outputs.image-digest }}"
          # Add actual deployment commands here

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, api-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://pl8wrds.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          echo "Digest: ${{ needs.build.outputs.image-digest }}"
          # Add actual deployment commands here

  # Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "Staging deployment successful"
          fi
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "Production deployment successful"
          fi