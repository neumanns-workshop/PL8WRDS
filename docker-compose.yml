version: '3.8'

services:
  # Main FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: pl8wrds-app
    ports:
      - "${APP_PORT:-8000}:8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=${DATABASE_URL:-}
      - PYTHONPATH=/app
    volumes:
      - .:/app
      - ./cache:/app/cache
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - pl8wrds-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: pl8wrds-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - pl8wrds-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL Database (Optional - for future use)
  postgres:
    image: postgres:15-alpine
    container_name: pl8wrds-postgres
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-pl8wrds}
      - POSTGRES_USER=${POSTGRES_USER:-pl8wrds}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-pl8wrds}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - pl8wrds-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pl8wrds}"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - database

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: pl8wrds-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - pl8wrds-network
    restart: unless-stopped
    profiles:
      - proxy

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: pl8wrds-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pl8wrds-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: pl8wrds-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - pl8wrds-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Testing Service (for running tests in isolated environment)
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: pl8wrds-test
    environment:
      - ENVIRONMENT=test
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379
    volumes:
      - .:/app
      - ./test-reports:/app/test-reports
      - ./coverage:/app/coverage
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - pl8wrds-network
    command: >
      sh -c "
        mkdir -p /app/cache /app/data /app/models &&
        echo '{}' > /app/cache/corpus_stats.json &&
        echo '{}' > /app/cache/corpus_features.json &&
        touch /app/data/words_with_freqs.json &&
        pytest tests/ -v --cov=app --cov-report=term-missing --cov-report=html:coverage --cov-report=xml:coverage/coverage.xml
      "
    profiles:
      - testing

  # Load Testing Service (for performance testing)
  locust:
    image: locustio/locust
    container_name: pl8wrds-locust
    ports:
      - "${LOCUST_PORT:-8089}:8089"
    volumes:
      - ./tests/performance/locustfile.py:/mnt/locust/locustfile.py
    command: -f /mnt/locust/locustfile.py --host=http://app:8000 --web-host=0.0.0.0
    depends_on:
      - app
    networks:
      - pl8wrds-network
    restart: unless-stopped
    profiles:
      - load-testing

# Named volumes for data persistence
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network for inter-service communication
networks:
  pl8wrds-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16